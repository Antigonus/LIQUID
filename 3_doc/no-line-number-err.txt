Just stated documenting these recently ...

1. 

  raco setup: 1 running: <pkgs>/liquid-doc/liquid/liquid.scrbl
  tabular: contract violation
    expected: list?
    given: "imperative:try"
    in: an element of
        the 1st argument of
        (->*
         ((listof
           (listof (or/c 'cont block? content?))))
         (#:cell-properties
          (listof (listof any/c))
          #:column-properties
          (listof any/c)
          #:row-properties
          (listof any/c)
          #:sep
          (or/c content? block? #f)
          #:style
          (or/c style? string? symbol? #f))
         table?)
    contract from: 
        <pkgs>/scribble-lib/scribble/base.rkt
    blaming: <pkgs>/liquid-doc/liquid/query-parser.scrbl
    at: <pkgs>/scribble-lib/scribble/base.rkt:349.2
    context...:
     /usr/share/racket/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
     /usr/share/racket/collects/racket/contract/private/misc.rkt:496:9
     /usr/share/racket/collects/racket/contract/private/arrow-val-first.rkt:273:3
     /home/deep/liquid-doc/liquid/query-parser.scrbl: [running body]

2. in this one I have copied ap.rkt which is working in the liquid-example directory, over to a new directory so
that it can be modified into a different application.  I get an error with no line number for a refernce to
a file in the liquid-doc!   Not suprisingly grepping for webi-dblp.rkt yields nothing in the local code.  So
where the heck is this coming from???

  Welcome to Racket v6.1.
  racket@> (enter! "ap.rkt")
  get-module-code: no such file: #<path:/home/deep/liquid-doc/liquid/webi-dblp.rkt>
    context...:
     /usr/share/racket/collects/syntax/modcode.rkt:109:0: get-module-path51
     /usr/share/racket/collects/syntax/modcode.rkt:212:0: get-module-code79
     standard-module-name-resolver
     standard-module-name-resolver
     standard-module-name-resolver
     /usr/share/racket/collects/racket/rerequire.rkt:18:0: rerequire
     /usr/share/racket/collects/racket/enter.rkt:54:0: dynamic-enter!6
     /usr/share/racket/collects/racket/private/misc.rkt:87:7


3. unknown identifiers are not so hard to find, unless created by a macro

racket@misc-lib.rkt> (enter! "db-lib.rkt")
(begin (require racket/trace) (define (db-lib-trace) (trace db-lib-init) (trace sql:exec) (trace sql:exec*) (trace sql:value) (trace sql:value*) (trace sql:maybe-value) (trace sql:maybe-value*) (trace sql:row) (trace sql:row*) (trace sql:rows) (trace sql:rows*) (trace sql:list) (trace sql:list*) (trace transaction:begin) (trace transaction:commit) (trace transaction:rollback) (trace column-list) (trace db:alloc-name) (trace db:alloc-number) (trace db:create-keyspace) (trace db:create-table) (trace db:delete-keyspace) (trace db:delete-table) (trace db:delete-table*) (trace db:is-keyspace) (trace db:is-table) (trace db:tables) (trace keyspace:alloc-number) (trace keyspace:dealloc-number) (trace table:delete) (trace table:insert) (trace table:insert*) (trace table:match)) (define (db-lib-untrace) (untrace db-lib-init) (untrace sql:exec) (untrace sql:exec*) (untrace sql:value) (untrace sql:value*) (untrace sql:maybe-value) (untrace sql:maybe-value*) (untrace sql:row) (untrace sql:row*) (untrace sql:rows) (untrace sql:rows*) (untrace sql:list) (untrace sql:list*) (untrace transaction:begin) (untrace transaction:commit) (untrace transaction:rollback) (untrace column-list) (untrace db:alloc-name) (untrace db:alloc-number) (untrace db:create-keyspace) (untrace db:create-table) (untrace db:delete-keyspace) (untrace db:delete-table) (untrace db:delete-table*) (untrace db:is-keyspace) (untrace db:is-table) (untrace db:tables) (untrace keyspace:alloc-number) (untrace keyspace:dealloc-number) (untrace table:delete) (untrace table:insert) (untrace table:insert*) (untrace table:match)) (provide db-lib-init) (provide sql:exec) (provide sql:exec*) (provide sql:value) (provide sql:value*) (provide sql:maybe-value) (provide sql:maybe-value*) (provide sql:row) (provide sql:row*) (provide sql:rows) (provide sql:rows*) (provide sql:list) (provide sql:list*) (provide transaction:begin) (provide transaction:commit) (provide transaction:rollback) (provide column-list) (provide db:alloc-name) (provide db:alloc-number) (provide db:create-keyspace) (provide db:create-table) (provide db:delete-keyspace) (provide db:delete-table) (provide db:delete-table*) (provide db:is-keyspace) (provide db:is-table) (provide db:tables) (provide keyspace:alloc-number) (provide keyspace:dealloc-number) (provide table:delete) (provide table:insert) (provide table:insert*) (provide table:match))
db-lib-init: unbound identifier in module
  in: db-lib-init
  context...:
   standard-module-name-resolver
   /usr/share/racket/collects/racket/rerequire.rkt:18:0: rerequire
   /usr/share/racket/collects/racket/enter.rkt:54:0: dynamic-enter!6
   /usr/share/racket/collects/racket/private/misc.rkt:87:7

4.  say what? ... narrowed down to single module, never mind that module is 500 lines long .. went away after running
raco setup on the library again

racket@ap.rkt> (enter! "ap.rkt")
  [re-loading /home/deep/liquid-examples/test-ap/ap.rkt]
link: bad variable linkage;
 reference to a variable that is not a procedure or structure-type constant across all instantiations
  reference phase level: 0
  variable module: "/home/deep/liquid-lib/liquid/misc-lib.rkt"
  variable phase: 0
  reference in module: "/home/deep/liquid-lib/liquid/http-session.rkt"
  in: session-context-out
  context...:
   /home/deep/liquid-lib/liquid/http-session.rkt: [running body]
   /home/deep/liquid-examples/test-ap/ap.rkt: [traversing imports]
   /usr/share/racket/collects/racket/enter.rkt:54:0: dynamic-enter!6
   /usr/share/racket/collects/racket/private/misc.rkt:87:7

5. so somewhere there is an application and that application is given a bad value.  Somewhere ...  It is a run
time error, and compiled languages will also do the same in such cases, i.e. no line numbers .. a function name maybe?
don't even know where this is called from.

racket@object.rkt> (obj-test-0)
application: not a procedure;
 expected a procedure that can be applied to arguments
  given: 'field:copied-from
  arguments...: [none]
  context...:
   /home/deep/liquid-lib2/liquid/object.rkt:167:14
   /usr/share/racket/collects/racket/private/misc.rkt:87:7


6.  somewhere in the entirety of my program including the many requires, there is a call obj:set! with the wrong number of
arguments:

  racket@object.rkt> (enter! "node.rkt")
  obj:set!: arity mismatch;
   the expected number of arguments does not match the given number
    expected: 3
    given: 4
    arguments...:
     0
     9
     'field:debug
     "nd:type"
    context...:
     /home/deep/liquid-lib/liquid/node.rkt: [running body]
     /usr/share/racket/collects/racket/rerequire.rkt:18:0: rerequire
     /usr/share/racket/collects/racket/enter.rkt:54:0: dynamic-enter!6
     /usr/share/racket/collects/racket/private/misc.rkt:87:7

7. somewhere in the file node.rkt, something doesn't like  variable that was defined, and provided from
object.rkt, complaining it is not a constant (why should it be??)  .. solution was to delete contents of
the 'compiled' directory

    racket@object.rkt> (enter! "node.rkt")
    link: bad variable linkage;
     reference to a variable that not constant
      reference phase level: 0
      variable module: "/home/deep/liquid-lib/liquid/object.rkt"
      variable phase: 0
      reference in module: "/home/deep/liquid-lib/liquid/node.rkt"
      in: type-type
      context...:
       /home/deep/liquid-lib/liquid/node.rkt: [running body]
       /usr/share/racket/collects/racket/rerequire.rkt:18:0: rerequire
       /usr/share/racket/collects/racket/enter.rkt:54:0: dynamic-enter!6
       /usr/share/racket/collects/racket/private/misc.rkt:87:7


8.  this one took an hour, it is in docs  here is the error mess:


      Â§lambda1:/home/deep/liquid-doc/liquid> raco setup --pkgs liquid-doc
      raco setup: version: 6.1 [3m]
      raco setup: installation name: 6.1
      raco setup: variants: 3m
      raco setup: main collects: /usr/share/racket/collects
      raco setup: collects paths: 
      raco setup:   /home/mordecai/.racket/6.1/collects
      raco setup:   /usr/share/racket/collects
      raco setup: main pkgs: /usr/share/racket/pkgs
      raco setup: pkgs paths: 
      raco setup:   /usr/share/racket/pkgs
      raco setup:   /home/mordecai/.racket/6.1/pkgs
      raco setup: links files: 
      raco setup:   /usr/share/racket/links.rktd
      raco setup:   /home/mordecai/.racket/6.1/links.rktd
      raco setup: main docs: /usr/share/doc/racket
      raco setup: --- updating info-domain tables ---
      raco setup: --- pre-installing collections ---
      raco setup: --- installing foreign libraries ---
      raco setup: --- installing shared files ---
      raco setup: --- compiling collections ---
      raco setup: --- parallel build using 2 jobs ---
      raco setup: 1 making: <pkgs>/liquid-doc/compiled
      raco setup: 1 making: <pkgs>/liquid-doc/liquid
      raco setup: --- creating launchers ---
      raco setup: --- installing man pages ---
      raco setup: --- building documentation ---
      raco setup: 1 running: <pkgs>/liquid-doc/liquid/liquid.scrbl
      prog:3:0: read: expected a `)' to close `('
        possible cause: indentation suggests a missing `)' before line 7
        context...:
         /usr/share/racket/pkgs/scribble-lib/scribble/private/manual-code.rkt:56:0: typeset-code15
         /home/deep/liquid-doc/liquid/multiple-continuations-architecture.scrbl: [running body]
         /home/deep/liquid-doc/liquid/architecture.scrbl: [traversing imports]
         /home/deep/liquid-doc/liquid/liquid.scrbl: [traversing imports]
         /usr/share/racket/pkgs/racket-index/setup/scribble.rkt:895:0: load-doc/ensure-prefix
         /usr/share/racket/pkgs/racket-index/setup/scribble.rkt:1146:13
         /usr/share/racket/collects/setup/parallel-do.rkt:420:20: loop

problem is that it isn't in liquid.scrbl, it is in two include files down.  It is not
on line 7, but was well into the file, and it wasn't part of the document structure, but
it was in a quoted example ..  in multiple-continuations-architecture.scrbl:

      #lang scribble/manual
      @(require (for-label racket/base
                           ))               

      @title[#:style '(toc)]{Multiple Continuations Architecture}

      @section{The Basic Approach}

      As a matter of convention, we simplify function calls by not using variable arguments, but
      instead where variable arguments are required we use explicit lists.  We make this more
      convenient by introducing the Unicode capital lambda, Î, as a synonym for @racket[list].
      In Emacs I have added both Î» and Î to my key map as alt-l  and alt-shift-l.

      Our basic approach is to pass continuation functions as arguments.  By convention the
      first function is the 'normal flow'.  By convention we call the first function
      continuation-ok.  For example, this is the definition for an extended hash ref that takes
      continuation functions.  It is implemented as a wrapper.  Of course it would be better to
      have a native version.

...


      @codeblock|{
        ...
        (define a 7)
        (x-hash-ref table a
          (Î»(v) (display "found: ")(displayln v))
          (Î»()  (displayln "did not find 7 ")  <---  scrble is mad this isn't balanced
          )
        ...
        }|

